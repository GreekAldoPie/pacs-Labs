/// @brief  A test of the class Chrono, json and of polynomial evaluation.
/// @detail We compare the evaluation of a polynomial with the standard
/// rule against Horner's rule.

// to use this you have to have compiled and installed the pacs "Utilities"
#include "chrono.hpp"
// documentation at https://github.com/nlohmann/json
#include "json.hpp"

// header in this folder
#include "horner.hpp"

#include <cmath>
#include <iostream>
#include <vector>
#include <fstream>


int
main(int argc, char** argv)
{
  using json = nlohmann::json;
  std::ifstream f("data.json");
  json data = json::parse(f);

  std::cout << "--- Paramenters:" << std::endl;
  const unsigned int degree = data.value("degree", 0);
  std::cout << "Polynomial degree: " << degree << std::endl;
  const double x_0 = data.value("x_0", 0.0);
  std::cout << "x_0: " << x_0 << std::endl;
  const double x_f = data.value("x_f", 1.0);
  std::cout << "x_f: " << x_f << std::endl;
  const unsigned int n_points = data.value("n_points", 1'000'000);
  std::cout << "n_points: " << n_points << std::endl;
  const double h = (x_f - x_0) / (n_points - 1);
  std::cout << "---------------------------" << std::endl;

  std::vector<double> coeff(degree + 1);
  std::cout << "Coefficients are computed automatically" << std::endl;
  for (unsigned int i = 0; i <= degree; ++i)
    coeff[i] = 2 * std::sin(2.0 * i);

  std::vector<double> points(n_points + 1);
  points[0] = x_0;
  for (unsigned int i = 1; i <= n_points; ++i)
    points[i] = points[i - 1] + h;

  Timings::Chrono timer;

  std::cout << "Computing " << n_points << " evaluations of polynomial"
    << " with standard formula" << std::endl;
  timer.start();
  evaluate_poly(points, coeff, &eval);
  std::cout << std::endl;
  timer.stop();
  std::cout << timer << std::endl;

  std::cout << "Computing " << n_points << " evaluations of polynomial with"
    << " Horner's rule" << std::endl;
  timer.start();
  evaluate_poly(points, coeff, &eval_horner);
  std::cout << std::endl;
  timer.stop();
  std::cout << timer << std::endl;
}
#ifndef HORNER_HPP
#define HORNER_HPP
#include <vector>

/// Evaluate a polynomial using standard rule.
/**
 * \f$ y=a_0+a_1x+\ldots+a_nx^n\f$
 *
 * @param a vector containing the coefficients from lowest to highest order.
 * @param x evaluation point.
 */
double
eval(const std::vector<double> &a, const double &x);

/// Evaluate a polynomial using Horner's rule.
/**
 * \f$y=(\ldots(a_nx+a_{n-1})x+a_{n-2})x\ldots +a_0\f$
 *
 * @param a vector containing the coefficients from lowest to highest order.
 * @param x evaluation point.
 */
double
eval_horner(const std::vector<double> &a, const double &x);

/// This only to show the use of pointers to function.
///
/// A pointer to function.
/// typedef double (*eval_method)(const std::vector<double> &, const double &);
///
/// In C++11 it is preferable to do:
using eval_method = double (*)(const std::vector<double> &, const double &);

/// Evaluates polynomial in a set of points.
/**
 * @param points Vector of points to compute the polynomial.
 * @param a      Polynomial coefficients.
 * @result       A vector with the evaluated points.
 * @param method Method to evaluate the polynomial.
 */
std::vector<double>
evaluate_poly(const std::vector<double> &points,
              const std::vector<double> &a,
              eval_method                method);

#endif /* HORNER_HPP */
#include "horner.hpp"

#include <algorithm>
#include <cmath>
#include <iostream>

// Parallel policies are only available in GCC since version 9.
#ifdef PARALLELEXEC
#  if defined(__GNUC__) && (__GNUC__ >= 9)
#    include <execution>
#  else
#    undef PARALLELEXEC
#  endif
#endif

/**
 * Since std::pow() is very expensive, a specialization for
 * integers is implemented.
 * https://en.wikipedia.org/wiki/Exponentiation_by_squaring
 */
double pow_integer(double base, unsigned int exp) {
  double res = 1.0;
  while (exp > 0) {
    if (exp & 1)
      res *= base;
    base *= base;
    exp >>= 1;
  }
  return res;
}

double
eval(const std::vector<double> &a, const double &x)
{
  if (a.empty())
    std::cerr << "The vector of coefficients 'a' cannot be empty!" << std::endl;

  double result{a[0]};

  for (std::vector<double>::size_type k = 1; k < a.size(); ++k)
    {
      result += a[k] * pow_integer(x, k);

      // std::pow is VERY expensive.
      // If you want to test with the standard pow comment the
      // previous statement and uncomment the next one.
      // result += a[k] * std::pow(x, k);
    }

  return result;
}

double
eval_horner(const std::vector<double> &a, const double &x)
{
  double result{a.back()};

  for (auto i = a.crbegin() + 1; i != a.crend(); ++i)
    result = result * x + (*i);

  return result;
}

/// Evaluates polynomial at a set of points.
std::vector<double>
evaluate_poly(const std::vector<double> &points,
              const std::vector<double> &a,
              eval_method                method)
{
  std::vector<double> result(points.size());

  auto compute = [&a, &method](const double &x) { return method(a, x); };

#ifdef PARALLELEXEC
#  warning "Using parallel implementation of std::transform"
  std::transform(
    std::execution::par, points.begin(), points.end(), result.begin(), compute);
#else
#  warning "Using sequential implementation of std::transform"
  std::transform(points.begin(), points.end(), result.begin(), compute);
  // Or, equivalently:
  // std::transform(std::execution::seq, points.begin(), points.end(), result.begin(), compute);
#endif

  return result;
}
